Ordre de crÃ©ation : 

1) Site 
2) Area
3) Worker
4) Leader
5) Machine
6) Maintenance 
7) Control
8) Worker_Maintenance
9) Machine Area
----
10) Employee
11) Supplier
12) Orders
13) Supplier_machine
14) Order_supplier_machine


///////
SCRIPTS SQL : 
https://chartio.com/resources/tutorials/how-to-define-an-auto-increment-primary-key-in-oracle/ 

ATTENTION : SANS COMMIT RIEN NE SE VALIDE -> inateignable par API 


INSERT INTO worker (worker_firstname,worker_lastname,worker_mail,worker_password,site_id)
VALUES ('Daniel','Craig','daniel.craig@gmail.com','Lstbnd070',1);

----
site.sql

DROP TABLE site

DROP SEQUENCE site_sequence


CREATE TABLE site (
  site_id NUMBER(5) NOT NULL,
  city VARCHAR2(100) NOT NULL,
  address VARCHAR2(100) NOT NULL,
  CONSTRAINT site_pk PRIMARY KEY (site_id)
)

CREATE SEQUENCE site_sequence

CREATE OR REPLACE TRIGGER site_on_insert
  BEFORE INSERT ON site
  FOR EACH ROW
BEGIN
  SELECT site_sequence.nextval
  INTO :new.site_id
  FROM dual;
END;



----
area.sql

DROP TABLE area

DROP SEQUENCE area_sequence

CREATE TABLE area(
  area_id NUMBER(5) NOT NULL,
  section VARCHAR2(15) NOT NULL,
  dangerousness VARCHAR2(50) NOT NULL,
  site_id NUMBER(5) NOT NULL,
  CONSTRAINT area_pk PRIMARY KEY (area_id),
  CONSTRAINT check_dangerousness_type CHECK (dangerousness IN ('green', 'orange', 'red','black')),
  CONSTRAINT fk_site_area FOREIGN KEY (site_id) REFERENCES site(site_id)
)

CREATE SEQUENCE area_sequence

CREATE OR REPLACE TRIGGER area_on_insert
  BEFORE INSERT ON area
  FOR EACH ROW
BEGIN
  SELECT area_sequence.nextval
  INTO :new.area_id
  FROM dual;
END;


----
worker.sql

DROP TABLE worker

DROP SEQUENCE worker_sequence

CREATE TABLE worker(
  worker_id NUMBER(5) NOT NULL,
  worker_firstname VARCHAR2(100) NOT NULL,
  worker_lastname VARCHAR2(100) NOT NULL,
  worker_mail VARCHAR2(100) NOT NULL,
  worker_password VARCHAR2(200) NOT NULL,
  site_id NUMBER(5) NOT NULL, 
  CONSTRAINT worker_pk PRIMARY KEY (worker_id),
  CONSTRAINT fk_site_worker FOREIGN KEY (site_id) REFERENCES site(site_id)
)

CREATE SEQUENCE worker_sequence

CREATE OR REPLACE TRIGGER worker_on_insert
  BEFORE INSERT ON worker
  FOR EACH ROW
BEGIN
  SELECT worker_sequence.nextval
  INTO :new.worker_id
  FROM dual;
END;


---
leader.sql

DROP TABLE leader

DROP SEQUENCE leader_sequence

CREATE TABLE leader(
  leader_id NUMBER(5) NOT NULL,
  leader_firstname VARCHAR2(100) NOT NULL,
  leader_lastname VARCHAR2(100) NOT NULL,
  leader_mail VARCHAR2(100) NOT NULL,
  leader_password VARCHAR2(200) NOT NULL,
  site_id NUMBER(5) NOT NULL, 
  CONSTRAINT leader_pk PRIMARY KEY (leader_id),
  CONSTRAINT fk_site_leader FOREIGN KEY (site_id) REFERENCES site(site_id)
)

CREATE SEQUENCE leader_sequence

CREATE OR REPLACE TRIGGER leader_on_insert
  BEFORE INSERT ON leader
  FOR EACH ROW
BEGIN
  SELECT leader_sequence.nextval
  INTO :new.leader_id
  FROM dual;
END;

--- 
machine.sql

DROP TABLE machine

DROP SEQUENCE machine_sequence

CREATE TABLE machine(
  machine_id NUMBER(5) NOT NULL,
  machine_type VARCHAR(50) NOT NULL,
  machine_status VARCHAR(100) NOT NULL,
  site_id NUMBER(5) NOT NULL,
  CONSTRAINT machine_pk PRIMARY KEY (machine_id),
  CONSTRAINT fk_site_machine FOREIGN KEY (site_id) REFERENCES site(site_id),
  CONSTRAINT check_machine_type CHECK (machine_type IN ('production','assembly','sorting')),
  CONSTRAINT check_machine_status CHECK (machine_status IN ('running','off','down','waitingformaintenance','toreplace'))
)

CREATE SEQUENCE machine_sequence

CREATE OR REPLACE TRIGGER machine_on_insert
  BEFORE INSERT ON machine
  FOR EACH ROW
BEGIN
  SELECT machine_sequence.nextval
  INTO :new.machine_id
  FROM dual;
END;

---
maintenance.sql

DROP TABLE maintenance

DROP SEQUENCE maintenance_sequence

CREATE TABLE maintenance(
   maintenance_id NUMBER(5) NOT NULL,
   maintenance_date DATE NOT NULL,
   maintenance_status VARCHAR2(100) NOT NULL,
   duration INTERVAL DAY TO SECOND,
   machine_id NUMBER(5) NOT NULL,
   leader_id NUMBER(5) NOT NULL,
   CONSTRAINT maintenance_pk PRIMARY KEY (maintenance_id),
   CONSTRAINT fk_maintenance_machine FOREIGN KEY (machine_id) REFERENCES machine(machine_id),
   CONSTRAINT fk_maintenance_leader FOREIGN KEY (leader_id) REFERENCES leader(leader_id),
   CONSTRAINT check_maintenance_status CHECK (maintenance_status IN ('todo','done','ongoing','toredo','validated'))	
   
)

CREATE SEQUENCE maintenance_sequence

CREATE OR REPLACE TRIGGER maintenance_on_insert
  BEFORE INSERT ON maintenance
  FOR EACH ROW
BEGIN
  SELECT maintenance_sequence.nextval
  INTO :new.maintenance_id
  FROM dual;
END;

----

worker_maintenance.sql


CREATE TABLE worker_maintenance(
   maintenance_id NUMBER(5) NOT NULL CONSTRAINT fk_maintenance_worker_maintenance REFERENCES maintenance(maintenance_id),
   worker_id NUMBER(5) NOT NULL CONSTRAINT fk_worker_worker_maintenance REFERENCES worker(worker_id),
   rapport VARCHAR2(500),
   CONSTRAINT uc_worker_maintenance UNIQUE (maintenance_id,worker_id)
)


----
machine_area.sql

CREATE TABLE machine_area(
  machine_id NUMBER(5) NOT NULL CONSTRAINT fk_machine_machine_area REFERENCES machine(machine_id),
  area_id NUMBER(5) NOT NULL CONSTRAINT fk_area_machine_area REFERENCES area(area_id),
  CONSTRAINT uc_machine_area UNIQUE (machine_id,area_id)
)

----
employee.sql

DROP TABLE employee

DROP SEQUENCE employee_sequence

 CREATE TABLE employee(
	employee_id NUMBER(5) NOT NULL,
	employee_firstname VARCHAR2(100) NOT NULL,
	employee_lastname VARCHAR2(100) NOT NULL,
	employee_mail VARCHAR2(100) NOT NULL,
	employee_password VARCHAR2(200) NOT NULL,
	CONSTRAINT employee_pk PRIMARY KEY (employee_id)
);


CREATE SEQUENCE employee_sequence

CREATE OR REPLACE TRIGGER employee_on_insert
  BEFORE INSERT ON employee
  FOR EACH ROW
BEGIN
  SELECT employee_sequence.nextval
  INTO :new.employee_id
  FROM dual;
END;
----
supplier.sql

DROP TABLE supplier

DROP SEQUENCE supplier_sequence

 CREATE TABLE supplier(
	supplier_id NUMBER(5) NOT NULL,
	supplier_name VARCHAR2(100) NOT NULL,
	supplier_phone VARCHAR2(50) NOT NULL,
	supplier_mail VARCHAR2(100) NOT NULL,
	CONSTRAINT supplier_pk PRIMARY KEY (supplier_id)
);

CREATE SEQUENCE supplier_sequence

CREATE OR REPLACE TRIGGER supplier_on_insert
  BEFORE INSERT ON supplier
  FOR EACH ROW
BEGIN
  SELECT supplier_sequence.nextval
  INTO :new.supplier_id
  FROM dual;
END;
----
orders.sql


DROP TABLE orders

DROP SEQUENCE orders_sequence


 CREATE TABLE orders(
	order_id NUMBER(5) NOT NULL,
	order_date DATE NOT NULL,
	price NUMBER(10,2) NOT NULL,
	employee_id NUMBER(5) NOT NULL,
	CONSTRAINT orders_pk PRIMARY KEY (order_id),
	CONSTRAINT fk_orders FOREIGN KEY (employee_id) REFERENCES employee (employee_id)
);

CREATE SEQUENCE orders_sequence

CREATE OR REPLACE TRIGGER orders_on_insert
  BEFORE INSERT ON orders
  FOR EACH ROW
BEGIN
  SELECT orders_sequence.nextval
  INTO :new.orders_id
  FROM dual;
END;

----
supplier_machine.sql

DROP TABLE supplier_machine

DROP SEQUENCE supplier_machine_sequence

 CREATE TABLE supplier_machine(
	supplier_machine_id NUMBER(5) NOT NULL,
	model VARCHAR2(50) NOT NULL,
	brand VARCHAR2(50) NOT NULL,
	price number(10,2) NOT NULL,
	description VARCHAR2(200)NOT NULL, 
	supplier_id NUMBER(5) NOT NULL,
	CONSTRAINT supplier_machine_pk PRIMARY KEY (supplier_machine_id),
	CONSTRAINT fk_supplier_machine FOREIGN KEY (supplier_id) REFERENCES supplier (supplier_id)
);

CREATE SEQUENCE supplier_machine_sequence

CREATE OR REPLACE TRIGGER supplier_machine_on_insert
  BEFORE INSERT ON supplier_machine
  FOR EACH ROW
BEGIN
  SELECT supplier_machine_sequence.nextval
  INTO :new.supplier_machine_id
  FROM dual;
END;


----
order_supplier_machine.sql

 CREATE TABLE order_supplier_machine(
	order_id NUMBER(5) NOT NULL CONSTRAINT fk_order_order_supplier_machine REFERENCES orders(order_id),
	quantity SMALLINT NOT NULL,
	machine_id NUMBER(5) NOT NULL CONSTRAINT fk_machine_order_supplier_machine REFERENCES supplier_machine(machine_id),
	CONSTRAINT uc_order_supplier_machine UNIQUE (machine_id,order_id)
);
