SET serveroutput ON
--QUESTIONS


/*********SUPPRESSION DES TABLES AVANT CREATION*********/
DROP TABLE machine_areas;
DROP TABLE worker_maintenance;
DROP TABLE areas;
DROP TABLE maintenance;
DROP TABLE machine;
DROP TABLE worker;
DROP TABLE leader;
DROP TABLE order_supplier_machine;
DROP TABLE factory_employee;
DROP TABLE site;
DROP TABLE orders;
DROP TABLE supplier_machine;
DROP TABLE supplier;

/*********SUPPRESSION DES SEQUENCES AVANT CREATION*********/

DROP SEQUENCE site_sequence;
DROP SEQUENCE areas_sequence;
DROP SEQUENCE worker_sequence;
DROP SEQUENCE leader_sequence;
DROP SEQUENCE machine_sequence;
DROP SEQUENCE maintenance_sequence;
DROP SEQUENCE employee_sequence;
DROP SEQUENCE supplier_sequence;
DROP SEQUENCE orders_sequence;
DROP SEQUENCE supplier_machine_sequence;



/*********CREATION DES TABLES*********/

CREATE TABLE site (
  site_id NUMBER(5) CONSTRAINT pk_site PRIMARY KEY,
  city VARCHAR2(100) NOT NULL,
  address VARCHAR2(100) NOT NULL
);


CREATE TABLE areas(
  areas_id NUMBER(5) NOT NULL CONSTRAINT areas_pk PRIMARY KEY,
  section VARCHAR2(15) NOT NULL,
  dangerousness VARCHAR2(50) NOT NULL,
  site_id NUMBER(5) NOT NULL CONSTRAINT fk_site_area REFERENCES site(site_id),
  CONSTRAINT check_dangerousness_type CHECK (dangerousness IN ('green', 'orange', 'red','black'))
);

CREATE TABLE worker(
  worker_id NUMBER(5) NOT NULL CONSTRAINT worker_pk PRIMARY KEY,
  worker_firstname VARCHAR2(100) NOT NULL,
  worker_lastname VARCHAR2(100) NOT NULL,
  worker_mail VARCHAR2(100) NOT NULL,
  worker_password VARCHAR2(200) NOT NULL,
  site_id NUMBER(5) NOT NULL CONSTRAINT fk_site_worker REFERENCES site(site_id) 
);


CREATE TABLE leader(
  leader_id NUMBER(5) NOT NULL CONSTRAINT leader_pk PRIMARY KEY ,
  leader_firstname VARCHAR2(100) NOT NULL,
  leader_lastname VARCHAR2(100) NOT NULL,
  leader_mail VARCHAR2(100) NOT NULL,
  leader_password VARCHAR2(200) NOT NULL,
  site_id NUMBER(5) NOT NULL CONSTRAINT fk_site_leader REFERENCES site(site_id)
);

CREATE TABLE machine(
  machine_id NUMBER(5) NOT NULL CONSTRAINT machine_pk PRIMARY KEY,
  machine_type VARCHAR(50) NOT NULL,
  machine_status VARCHAR(100) NOT NULL,
  model VARCHAR(50) NOT NULL,
  brand VARCHAR(50) NOT NULL,
  description VARCHAR(200),
  site_id NUMBER(5) NOT NULL CONSTRAINT fk_site_machine  REFERENCES site(site_id),
  CONSTRAINT check_machine_type CHECK (machine_type IN ('production','assembly','sorting')),
  CONSTRAINT check_machine_status CHECK (machine_status IN ('running','off','down','waitingformaintenance','toreplace'))
);



CREATE TABLE maintenance(
   maintenance_id NUMBER(5) NOT NULL CONSTRAINT maintenance_pk PRIMARY KEY ,
   maintenance_date DATE NOT NULL,
   maintenance_status VARCHAR2(100) NOT NULL,
   maintenance_start TIMESTAMP,
   maintenance_end TIMESTAMP,
   machine_id NUMBER(5) NOT NULL CONSTRAINT fk_maintenance_machine REFERENCES machine(machine_id),
   leader_id NUMBER(5) NOT NULL CONSTRAINT fk_maintenance_leader REFERENCES leader(leader_id),
   CONSTRAINT check_maintenance_status CHECK (maintenance_status IN ('todo','done','ongoing','toredo','validated'))
);

CREATE TABLE worker_maintenance(
   maintenance_id NUMBER(5) NOT NULL CONSTRAINT fk_maintenance_worker_maintenance REFERENCES maintenance(maintenance_id),
   worker_id NUMBER(5) NOT NULL CONSTRAINT fk_worker_worker_maintenance REFERENCES worker(worker_id),
   report VARCHAR2(500),
   CONSTRAINT uc_worker_maintenance UNIQUE (maintenance_id,worker_id)
);


CREATE TABLE machine_areas(
  machine_id NUMBER(5) NOT NULL CONSTRAINT fk_machine_machine_area REFERENCES machine(machine_id),
  areas_id NUMBER(5) NOT NULL CONSTRAINT fk_areas_machine_areas REFERENCES areas(areas_id),
  CONSTRAINT uc_machine_areas UNIQUE (machine_id,areas_id)
);

 CREATE TABLE factory_employee(
	employee_id NUMBER(5) NOT NULL CONSTRAINT employee_pk PRIMARY KEY,
	employee_firstname VARCHAR2(100) NOT NULL,
	employee_lastname VARCHAR2(100) NOT NULL,
	employee_mail VARCHAR2(100) NOT NULL,
	employee_password VARCHAR2(200) NOT NULL,
	site_id NUMBER(5) NOT NULL CONSTRAINT fk_siteid_employee REFERENCES site(site_id)
);


CREATE TABLE supplier(
	supplier_id NUMBER(5) NOT NULL CONSTRAINT supplier_pk PRIMARY KEY,
	supplier_name VARCHAR2(100) NOT NULL,
	supplier_phone VARCHAR2(50) NOT NULL,
	supplier_mail VARCHAR2(100) NOT NULL
);


CREATE TABLE orders(
	order_id NUMBER(5) NOT NULL CONSTRAINT orders_pk PRIMARY KEY ,
	order_date DATE NOT NULL,
	price NUMBER(10,2) NOT NULL,
	employee_id NUMBER(5) NOT NULL CONSTRAINT fk_orders REFERENCES factory_employee(employee_id)
);


CREATE TABLE supplier_machine(
	supplier_machine_id NUMBER(5) NOT NULL CONSTRAINT supplier_machine_pk PRIMARY KEY,
	model VARCHAR2(50) NOT NULL,
	brand VARCHAR2(50) NOT NULL,
	price number(10,2) NOT NULL,
	machine_type VARCHAR2(50) NOT NULL,
	description VARCHAR2(200), 
	supplier_id NUMBER(5) NOT NULL CONSTRAINT fk_supplier_machine REFERENCES supplier (supplier_id),
	CONSTRAINT check_supplier_machine_type CHECK (machine_type IN ('production','assembly','sorting'))
);

CREATE TABLE order_supplier_machine(
	order_id NUMBER(5) NOT NULL CONSTRAINT fk_order_order_supplier_machine REFERENCES orders(order_id),
	quantity SMALLINT NOT NULL,
	machine_id NUMBER(5) NOT NULL CONSTRAINT fk_machine_order_supplier_machine REFERENCES supplier_machine(supplier_machine_id),
	CONSTRAINT uc_order_supplier_machine UNIQUE (machine_id,order_id)
);



/*********CREATION DES SEQUENCES*********/

CREATE SEQUENCE site_sequence
INCREMENT BY 1
START WITH 1
NOCACHE;

CREATE SEQUENCE areas_sequence
INCREMENT BY 1
START WITH 1
NOCACHE;

CREATE SEQUENCE worker_sequence
INCREMENT BY 1
START WITH 20000
MAXVALUE 29999
NOCACHE;


CREATE SEQUENCE leader_sequence
INCREMENT BY 1
START WITH 30000
MAXVALUE 39999
NOCACHE;

CREATE SEQUENCE machine_sequence
INCREMENT BY 1
START WITH 1
NOCACHE;

CREATE SEQUENCE maintenance_sequence
INCREMENT BY 1
START WITH 1
NOCACHE;

CREATE SEQUENCE employee_sequence
INCREMENT BY 1
START WITH 40000
MAXVALUE 49999
NOCACHE;


CREATE SEQUENCE supplier_sequence
INCREMENT BY 1
START WITH 1
NOCACHE;

CREATE SEQUENCE orders_sequence
INCREMENT BY 1
START WITH 1
NOCACHE;

CREATE SEQUENCE supplier_machine_sequence
INCREMENT BY 1
START WITH 1
NOCACHE;


/*********CREATION DES TRIGGERS*********/


CREATE OR REPLACE TRIGGER site_on_insert
  BEFORE INSERT ON site
  FOR EACH ROW
BEGIN
  SELECT site_sequence.nextval
  INTO :new.site_id
  FROM dual;
END;


CREATE OR REPLACE TRIGGER areas_on_insert
  BEFORE INSERT ON areas
  FOR EACH ROW
BEGIN
  SELECT areas_sequence.nextval
  INTO :new.areas_id
  FROM dual;
END;



CREATE OR REPLACE TRIGGER worker_on_insert
  BEFORE INSERT ON worker
  FOR EACH ROW
BEGIN
  SELECT worker_sequence.nextval
  INTO :new.worker_id
  FROM dual;
END;

CREATE OR REPLACE TRIGGER leader_on_insert
  BEFORE INSERT ON leader
  FOR EACH ROW
BEGIN
  SELECT leader_sequence.nextval
  INTO :new.leader_id
  FROM dual;
END;


CREATE OR REPLACE TRIGGER machine_on_insert
  BEFORE INSERT ON machine
  FOR EACH ROW
BEGIN
  SELECT machine_sequence.nextval
  INTO :new.machine_id
  FROM dual;
END;

CREATE OR REPLACE TRIGGER maintenance_on_insert
  BEFORE INSERT ON maintenance
  FOR EACH ROW
BEGIN
  SELECT maintenance_sequence.nextval
  INTO :new.maintenance_id
  FROM dual;
END;

CREATE OR REPLACE TRIGGER employee_on_insert
  BEFORE INSERT ON factory_employee
  FOR EACH ROW
BEGIN
  SELECT employee_sequence.nextval
  INTO :new.employee_id
  FROM dual;
END;


CREATE OR REPLACE TRIGGER supplier_on_insert
  BEFORE INSERT ON supplier
  FOR EACH ROW
BEGIN
  SELECT supplier_sequence.nextval
  INTO :new.supplier_id
  FROM dual;
END;


CREATE OR REPLACE TRIGGER orders_on_insert
  BEFORE INSERT ON orders
  FOR EACH ROW
BEGIN
  SELECT orders_sequence.nextval
  INTO :new.order_id
  FROM dual;
END;


CREATE OR REPLACE TRIGGER supplier_machine_on_insert
  BEFORE INSERT ON supplier_machine
  FOR EACH ROW
BEGIN
  SELECT orders_sequence.nextval
  INTO :new.supplier_machine_id
  FROM dual;
END;


/*-------INSERTIONS (TO UPDATE) -----*/
INSERT INTO site(city,address) VALUES('Charleroi','Chaussee de marcinelle');

INSERT INTO areas(section,dangerousness,site_id) VALUES ('A','green',1);
INSERT INTO areas(section,dangerousness,site_id) VALUES ('B','green',1);

INSERT INTO worker (worker_firstname,worker_lastname,worker_mail,worker_password,site_id)
VALUES ('Daniel','Craig','daniel.craig@gmail.com','Lstbnd070',1);

INSERT INTO worker (worker_firstname,worker_lastname,worker_mail,worker_password,site_id)
VALUES ('Michel','Platini','miche.platini@gmail.com','PlFr19or',1);

INSERT INTO leader (leader_firstname,leader_lastname,leader_mail,leader_password,site_id)
VALUES ('Martin','Garix','garix.martin@gmail.com','Mdrtsf85',1);

INSERT INTO factory_employee (employee_firstname,employee_lastname,employee_mail,employee_password,site_id)
VALUES ('Cliff','Richard','cliff.richard@gmail.com','Clifsq8d',1);

INSERT INTO factory_employee (employee_firstname,employee_lastname,employee_mail,employee_password,site_id)
VALUES ('Dan','Bison','bison.dan@hotmail.com','B3redape',1);

----
DECLARE 
 value machine.machine_id%TYPE;
BEGIN
	insert_machine ('assembly',1,'running','AssemblyA32','SuperMachine',null,1,value);
	insert_machine_areas(value,2);
END;
----
DECLARE 
 value machine.machine_id%TYPE;
BEGIN
	insert_machine ('sorting',1,'down','SortB32','SuperMachine',null,1,value);
END;
----
DECLARE 
 value maintenance.maintenance_id%TYPE;
BEGIN
	insert_maintenance('29-12-2021','todo',1,30000,null,null,value);
END;
----
DECLARE 
 value maintenance.maintenance_id%TYPE;
BEGIN
	insert_maintenance('19-01-2022','todo',2,30000,null,null,value);
END;
----
exec insert_worker_maintenance(20000,1,null);
exec insert_worker_maintenance(20001,1,null);


insert into supplier_machine(model,brand,price,description,supplier_id,machine_type) VALUES ('Assembly2000','AssemblyUnion',3000,'Newest Assembly machine',1,'assembly');

insert into supplier_machine(model,brand,price,description,supplier_id,machine_type) VALUES ('Assembly2001','AssemblyUnion',6000,'Latest Assembly machine',1,'assembly');

-----

DECLARE
	created_order_id orders.order_id%TYPE;
BEGIN
	insert_orders('03-01-2022',3000,40000,created_order_id);
	insert_order_supplier_machine(1,created_order_id,1);
END;

-----
SELECT orders.order_id AS ord_id,
 order_date,employee_id,machine_id,
quantity,price FROM orders 
LEFT JOIN order_supplier_machine ON orders.order_id=order_supplier_machine.order_id;


/*************TO DO **********/
DANS LES INSERT UTILISER RETURNING INTO ! 

/**********************/
/*	MACHINE	      */
/**********************/
--Procedure of insertion in machine:


CREATE OR REPLACE PROCEDURE insert_machine(
	type IN machine.machine_type%TYPE,
	site_id IN site.site_id%TYPE,
	status IN machine.machine_status%TYPE,
	model IN machine.model%TYPE,
	brand IN machine.brand%TYPE,
	description IN machine.description%TYPE,
	areas_id IN areas.areas_id%TYPE,
	created_machine_id OUT machine.machine_id%TYPE) 
AS
BEGIN
	INSERT INTO machine(machine_type,site_id,machine_status,model,brand,description) 
	VALUES (type,site_id,status,model,brand,description) 
	RETURNING machine_id INTO created_machine_id;
	insert_machine_areas(created_machine_id,areas_id);
	COMMIT;
	EXCEPTION 
		WHEN OTHERS THEN 
			DBMS_OUTPUT.PUT_lINE('Error while creating a new machine');	
	
END;



--Procedure of insertion of machine in machine_areas

CREATE OR REPLACE PROCEDURE insert_machine_areas(
	machine_id IN machine.machine_id%TYPE,
	areas_id IN areas.areas_id%TYPE)
AS
BEGIN
	INSERT INTO machine_areas(machine_id,areas_id)
	VALUES (machine_id,areas_id);
	COMMIT;
	EXCEPTION 
		WHEN OTHERS THEN
			DBMS_OUTPUT.PUT_lINE('Error while inserting machine in area');		
END;


--Procedure of update Machine (status)

CREATE OR REPLACE PROCEDURE update_machine(
	machine_id_var IN machine.machine_id%TYPE,
	status IN machine.machine_status%TYPE,
	forException OUT machine.machine_id%TYPE
	) 
AS
	UNHANDLED_EXCEPTION_CODE machine.machine_id%TYPE;
BEGIN
	UNHANDLED_EXCEPTION_CODE := -1;
	UPDATE machine SET machine_status=status WHERE machine_id=machine_id_var;
	COMMIT;
	EXCEPTION 
		WHEN OTHERS THEN 
			DBMS_OUTPUT.PUT_lINE('Error while creating a new machine');
			forException :=  SQLCODE;	
END;
/






/**********************/
/*	MAINTENANCE   */
/**********************/

--Procedure of insertion in maintenance :


CREATE OR REPLACE PROCEDURE insert_maintenance(
	date_m IN VARCHAR2,
	status IN maintenance.maintenance_status%TYPE,
	machine_id IN machine.machine_id%TYPE,
	leader_id IN leader.leader_id%TYPE ,
	maintenance_start IN maintenance.maintenance_start%TYPE,
	maintenance_end IN maintenance.maintenance_end%TYPE,
	created_maintenance_id OUT maintenance.maintenance_id%TYPE,
	forException OUT maintenance.maintenance_id%TYPE) 
AS
	ex_date_format exception;
  	pragma exception_init(ex_date_format, -1843);
BEGIN
	INSERT INTO maintenance (maintenance_date,maintenance_status,machine_id,leader_id,maintenance_start,maintenance_end) 
	VALUES (TO_DATE(date_m, 'YYYY-MM-DD'),status,machine_id,leader_id,maintenance_start,maintenance_end)
	RETURNING maintenance_id INTO created_maintenance_id;
	COMMIT;
	EXCEPTION
		WHEN ex_date_format THEN 
			DBMS_OUTPUT.PUT_lINE('Date not valid : neeed YYYY-MM-DD format');
			forException := SQLCODE;
		WHEN OTHERS THEN 
			DBMS_OUTPUT.PUT_lINE('Error while creating a new maintenance');	
			forException := SQLCODE;
	
END;


--Procedure of insertion in worker_maintenance:


CREATE OR REPLACE PROCEDURE insert_worker_maintenance(
	worker_id IN worker.worker_id%TYPE,
	maintenance_id IN maintenance.maintenance_id%TYPE,
	report IN worker_maintenance.report%TYPE,
	forException OUT maintenance.maintenance_id%TYPE  ) 
AS
BEGIN
	INSERT INTO worker_maintenance (worker_id,maintenance_id,report) 
	VALUES (worker_id,maintenance_id,report);
	COMMIT;
	EXCEPTION 
		WHEN OTHERS THEN 
			DBMS_OUTPUT.PUT_lINE('Error while creating a new record in worker_maintenance');
			forException := SQLCODE; 	
	
END;

--Procedure of updating maintenance 

CREATE OR REPLACE PROCEDURE update_maintenance(
	maintenance_id_param IN maintenance.maintenance_id%TYPE,
	maintenance_d IN maintenance.maintenance_date%TYPE,
	start_t IN maintenance.maintenance_start%TYPE,
	status IN maintenance.maintenance_status%TYPE,
	forException OUT maintenance.maintenance_id%TYPE 
	)
AS
	end_t  maintenance.maintenance_end%TYPE :=null;
	final_start_t maintenance.maintenance_start%TYPE :=start_t;
	final_maintenance_d maintenance.maintenance_date%TYPE := maintenance_d;
	
BEGIN
	forException := -1;
	IF status='done' OR status='toredo' THEN
		IF status='done' THEN 
			end_t:=CURRENT_TIMESTAMP;
		END IF;
		IF status='toredo' THEN
			final_start_t := CURRENT_TIMESTAMP;
			final_maintenance_d := TO_DATE(CURRENT_DATE, 'YYYY-MM-DD');
		END IF;
		UPDATE maintenance 
		SET maintenance_status=status,
		maintenance_start=final_start_t,
		maintenance_date=final_maintenance_d,
		maintenance_end=end_t
		WHERE maintenance_id=maintenance_id_param;
	END IF;
	
	
	IF status='validated' THEN
		UPDATE maintenance 
		SET maintenance_status=status,
		maintenance_start=final_start_t,
		maintenance_date=final_maintenance_d
		WHERE maintenance_id=maintenance_id_param;
	END IF;
	
	COMMIT;
	EXCEPTION 
		WHEN OTHERS THEN 
			DBMS_OUTPUT.PUT_lINE('Error while updating maintenance');
			forException := SQLCODE;
END;

--Procedure of update maintenance_status to done

CREATE OR REPLACE PROCEDURE changeStatusDone(maintenance_id_param worker_maintenance.maintenance_id%type,
status maintenance.maintenance_status%type, code OUT NUMBER) IS
return_number number;
begin
code :=0;
UPDATE maintenance 
SET maintenance_status= status, maintenance_end =CURRENT_TIMESTAMP
WHERE maintenance_id = maintenance_id_param;
return_number :=sql%rowcount;

if(return_number<1)
	then code :=-1;
	DBMS_OUTPUT.PUT_LINE('Pas de update');

else
	DBMS_OUTPUT.PUT_LINE('Update OK');
	commit;

end if;
EXCEPTION
 WHEN OTHERS THEN
	code :=  SQLCODE;
end;

/**********************/
/*	WORKER_MAINTENANCE   */
/**********************/

--Procedure of updating report

CREATE OR REPLACE PROCEDURE createReport(maintenance_id_param worker_maintenance.maintenance_id%type,
 worker_id_param worker_maintenance.worker_id%type, report_param worker_maintenance.report%type, code OUT NUMBER) IS
return_number number;
begin
code :=0;
UPDATE worker_maintenance 
	SET report = report_param
	WHERE maintenance_id = maintenance_id_param AND worker_id = worker_id_param;
return_number :=sql%rowcount;

if(return_number<1)
	then code :=-1;
	DBMS_OUTPUT.PUT_LINE('Pas de update');

else
	DBMS_OUTPUT.PUT_LINE('Update OK');
	commit;

end if;
EXCEPTION
 WHEN OTHERS THEN
	code :=  SQLCODE;
end;


/**********************/
/*	ORDER	      */
/**********************/

--Procedure of insertion in orders

CREATE OR REPLACE PROCEDURE insert_orders(
	order_date IN orders.order_date%TYPE,
	price IN orders.price%TYPE,
	empl_id IN factory_employee.employee_id%TYPE,
	created_orders_id OUT orders.order_id%TYPE,
	machine_id order_supplier_machine.machine_id%type,
	errorCode OUT NUMBER) IS
	return_code NUMBER;
	errorCodeSecond NUMBER;
BEGIN
	errorCode:=0;
	INSERT INTO orders (order_date,price,employee_id)
	VALUES (TO_DATE(order_date, 'DD-MM-YYYY'),price,empl_id) 
	RETURNING order_id INTO created_orders_id;
	return_code:= sql%rowcount;
     	if(return_code<1)
		then errorCode :=-1;
		DBMS_OUTPUT.PUT_LINE('Insertion failed');

	else
		DBMS_OUTPUT.PUT_LINE('Insertion OK');
	end if;
	if(errorCode=0) then
		insert_order_supplier_machine(machine_id,created_orders_id,1,errorCodeSecond); 
	end if;
	if(errorCodeSecond=0)then
		commit;
	else 	errorCode:=-1;
		rollback;
	end if;
	EXCEPTION 
		WHEN OTHERS THEN 
			DBMS_OUTPUT.PUT_lINE('Error while creating a new record in orders');
	
END;


--Procedure of insertion in order_supplier_machine

CREATE OR REPLACE PROCEDURE insert_order_supplier_machine(
	machine_id IN machine.machine_id%TYPE,
	order_id IN orders.order_id%TYPE,
	quantity IN order_supplier_machine.quantity%TYPE,
	errorCode OUT NUMBER) IS
return_code NUMBER;
BEGIN
errorCode:=0;
	INSERT INTO order_supplier_machine(machine_id,order_id,quantity)
	VALUES (machine_id,order_id,quantity);
	return_code:= sql%rowcount;
     	if(return_code<1)
		then errorCode :=-1;
		DBMS_OUTPUT.PUT_LINE('Insertion failed');

	else
		DBMS_OUTPUT.PUT_LINE('Insertion OK');
	end if;
	EXCEPTION 
		WHEN OTHERS THEN 
			DBMS_OUTPUT.PUT_lINE('Error while creating a new record in worker_maintenance');
END;
